#!/usr/bin/env python
# python standard libraries
import os
import re
from pathlib import Path
import sys
import socket
import fnmatch
import copy
import shutil
import glob

# third-party packages
import numpy as np
import setproctitle
import torch
import wandb
import json
import time

# code repository sub-packages
from onpolicy.config import get_config
from onpolicy.envs.goofspiel.goofspiel_gym import goofspiel_symmetry as Env
from onpolicy.envs.goofspiel.goofspiel import Goofspiel
from onpolicy.algorithms.r_mappo.algorithm.rMAPPOPolicy_sigma import R_MAPPOPolicy as empty_Policy
from onpolicy.envs.goofspiel.goofspiel_policy import Policy_goofspiel_random
from onpolicy.algorithms.NeuPL.mixing_policy import Parallel_mixing_policy as mixing_policy
# from onpolicy.algorithms.policy_DG.simple_policy_rule import Policy_E2P_3Doptimal as Evader_rule_policy
from onpolicy.algorithms.NeuPL.eval_match import eval_match_poker as eval_match
from onpolicy.algorithms.NeuPL.Population_eval.payoff_eval import get_policy_from_dir
from onpolicy.algorithms.NeuPL.Policy_prob_matrix import Nash_matrix
from onpolicy.envs.goofspiel.policy_like_spiel import policy_like_spiel, gen_mix_spiel_policy, calc_exp

def make_train_env(all_args):
    def get_env_fn(rank):
        def init_env():
            if all_args.env_name == "GOOFSPIEL":
                ## TODO: pass hyper-parameters to the environment
                env = Goofspiel(Env(all_args.n_rollout_threads))
            else:
                print("Can not support the " +
                      all_args.env_name + " environment.")
                raise NotImplementedError
            env.seed(all_args.seed + rank * 1000)
            return env
        return init_env()
    return get_env_fn(0)


def make_eval_env(all_args):
    def get_env_fn(rank):
        def init_env():
            if all_args.env_name == "GOOFSPIEL":
                ## TODO: pass hyper-parameters to the environment
                env = Goofspiel(Env(all_args.n_rollout_threads))
            else:
                print("Can not support the " +
                      all_args.env_name + " environment.")
                raise NotImplementedError
            env.seed(all_args.seed * 50000 + rank * 10000)
            return env
        return init_env()
    return get_env_fn(0)

def find_files(directory, pattern):
    regex = re.compile(pattern)
    matched_files = []
    
    for root, dirs, files in os.walk(directory):
        for file in files:
            if regex.match(file):
                matched_files.append(os.path.join(root, file))
    
    return matched_files


def parse_args(args, parser):
    parser.add_argument("--scenario_name", type=str,
                        default="simple_uav", 
                        help="which scenario to run on.")
    parser.add_argument("--num_agents", type=int, default=3,
                        help="number of controlled players.")
    parser.add_argument("--eval_deterministic", action="store_false", 
                        default=True, 
                        help="by default True. If False, sample action according to probability")
    parser.add_argument("--share_reward", action='store_false', 
                        default=True, 
                        help="by default true. If false, use different reward for each agent.")

    parser.add_argument("--save_videos", action="store_true", default=False, 
                        help="by default, do not save render video. If set, save video.")
    parser.add_argument("--video_dir", type=str, default="", 
                        help="directory to save videos.")
    
    #added by junyu
    parser.add_argument("--encoder_layer_N",type=int,
                        default=1, help="number of encoder layers")
    parser.add_argument("--encoder_hidden_size", type=int,
                        default=16, help="hidden size of encoder")
    parser.add_argument("--proprio_shape", type=int, default=13,
                        help="proprio_shape")
    parser.add_argument("--teammate_shape", type=int, default=7,
                        help="teammate")
    parser.add_argument("--opponent_shape", type=int, default=3,
                        help="opponent_shape")
    parser.add_argument("--n_head", type=int, default=4, help="n_head")
    parser.add_argument("--d_k", type=int, default= 16, help="d_k")
    parser.add_argument("--attn_size", type=int, default=16, help="attn_size")

    parser.add_argument("--team_name", type=str, default="evader")
    parser.add_argument("--oppo_name", type=str, default="pursuer")
    parser.add_argument("--sigma_layer_N",type=int, default=1)
    parser.add_argument("--sigma_encoder_layer_N",type=int, default=1)

    # NeuPL setting
    parser.add_argument("--population_size", type=int, default=6)
    parser.add_argument("--runner_num", type=int, default=1)
    parser.add_argument("--global_steps", type=int, default=0)
    parser.add_argument("--eval_episode_num", type=int, default=10)
    parser.add_argument("--total_round", type=int, default=10)
    parser.add_argument("--channel_interval", type=int, default=10)
    parser.add_argument("--use_mix_policy", action='store_true', default=False)
    parser.add_argument("--use_inherit_policy", action='store_false', default=True)
    parser.add_argument("--use_warmup", action='store_false', default=True)
    parser.add_argument("--single_round", action='store_true', default=False)
    parser.add_argument("--policy_backup_dir", type=str, default=None)
    parser.add_argument("--begin_inx", type=int, default=1)
    parser.add_argument("--role_number", type=int, default=0)
    parser.add_argument("--use_share_policy", action='store_false', default=True)
    parser.add_argument("--use_fast_update", action='store_true', default=False)
    parser.add_argument("--update_T", type=int, default=100)
    parser.add_argument("--begin_folder_index", type=int, default=1)
    parser.add_argument("--end_folder_index", type=int, default=100)
    parser.add_argument("--step_folder_index", type=int, default=1)
                        
    all_args = parser.parse_known_args(args)[0]

    return all_args

def check_files_exist(directory, match_str):
    has_str = False

    for file in os.listdir(directory):
        if fnmatch.fnmatch(file, match_str):
            has_str = True

        if has_str:
            break

    return has_str


def main(args):
    parser = get_config()
    all_args = parse_args(args, parser)
    if all_args.algorithm_name == "rmappo":
        print("u are choosing to use rmappo, we set use_recurrent_policy to be True")
        all_args.use_recurrent_policy = True
        all_args.use_naive_recurrent_policy = False
    elif all_args.algorithm_name == "mappo":
        print("u are choosing to use mappo, we set use_recurrent_policy & use_naive_recurrent_policy to be False")
        all_args.use_recurrent_policy = False 
        all_args.use_naive_recurrent_policy = False
    elif all_args.algorithm_name == "ippo":
        print("u are choosing to use ippo, we set use_centralized_V to be False. Note that GRF is a fully observed game, so ippo is rmappo.")
        all_args.use_centralized_V = False
    else:
        raise NotImplementedError

    # cuda
    if all_args.cuda and torch.cuda.is_available():
        print("choose to use gpu...")
        device = torch.device("cuda")
        # torch.set_num_threads(all_args.n_training_threads)
        if all_args.cuda_deterministic:
            torch.backends.cudnn.benchmark = False
            torch.backends.cudnn.deterministic = True
    else:
        print("choose to use cpu...")
        device = torch.device("cpu")
        # torch.set_num_threads(all_args.n_training_threads)

    # run dir
    run_dir = Path(os.path.split(os.path.dirname(os.path.abspath(__file__)))[
                   0] + "/results") / all_args.env_name / all_args.scenario_name / all_args.algorithm_name / all_args.experiment_name
    if not run_dir.exists():
        os.makedirs(str(run_dir))

    # wandb
    if all_args.use_wandb:
        run = wandb.init(config=all_args,
                         project=all_args.env_name,
                        #  entity=all_args.user_name,
                         notes=socket.gethostname(),
                         name="-".join([
                            all_args.algorithm_name,
                            all_args.experiment_name,
                            "seed" + str(all_args.seed)
                         ]),
                         #group=all_args.scenario_name,
                         group="poker_exploit",
                        #  dir=str(run_dir),
                         job_type="training",
                         reinit=False)
    else:
        if not run_dir.exists():
            curr_run = 'run1'
        else:
            exst_run_nums = [int(str(folder.name).split('run')[1]) for folder in run_dir.iterdir() if str(folder.name).startswith('run')]
            if len(exst_run_nums) == 0:
                curr_run = 'run1'
            else:
                curr_run = 'run%i' % (max(exst_run_nums) + 1)
        run_dir = run_dir / curr_run
        if not run_dir.exists():
            os.makedirs(str(run_dir))

    setproctitle.setproctitle("-".join([
        all_args.env_name, 
        all_args.scenario_name, 
        all_args.algorithm_name, 
        all_args.experiment_name
    ]) + "@" + all_args.user_name)

            
    # seed
    torch.manual_seed(all_args.seed)
    torch.cuda.manual_seed_all(all_args.seed)
    np.random.seed(all_args.seed)

    # env init
    envs_p = make_train_env(all_args)
    eval_envs_p = make_eval_env(all_args) if all_args.use_eval else None

    eval_match_envs = make_train_env(all_args)

    game = copy.deepcopy(eval_match_envs.world.standard_game)

    policies_p1 = []
    share_policies = []
    policy_anchor = []

    with open(str(all_args.policy_backup_dir)+'/policy_config.json', 'r') as f:
        params = json.load(f)

    for key, value in params.items():
        setattr(all_args, key, value)

    for i in range(all_args.population_size):
        policy_p1 = empty_Policy(all_args,
                            envs_p.observation_space[0],
                            envs_p.observation_space[0],
                            envs_p.action_space[0],
                            device)
        if i == 0:
            policy_rule_p = Policy_goofspiel_random(policy_p1, device)
            policy_anchor.append(policy_rule_p)
            share_policies.append(policy_p1)
            policies_p1.append(policy_rule_p)
        else:
            policies_p1.append(policy_p1)


    # num_agents = envs_e.world.num_team
    # all_args.num_agents = num_agents
    # all_args.use_mixer = True if num_agents >= 2 else False
    
    role_name = ["goofspiel", "goofspiel"]
    role_dict = dict()
    role_dict["symmetry"] = "goofspiel"
    folder_inx = all_args.begin_folder_index

    while folder_inx < all_args.end_folder_index:
        round_str = os.path.join(all_args.policy_backup_dir, "round"+str(folder_inx))
        if os.path.exists(round_str):
            if check_files_exist(round_str, "*.pt") == False:
                print("No model in {}!".format(round_str))
                break
        else:
            print("No folder {}!".format(round_str))
            break
        policies_oppo = get_policy_from_dir(all_args, eval_match_envs, round_str, policy_anchor[0], role_dict, device = device)
        print("number of policies = ", len(policies_oppo))
        if all_args.population_type == "MFR_2level":
            pattern = r'frozen_num_of_level*'
            matched_files = find_files(round_str, pattern)
            num_of_level_array = np.load(matched_files[0])
            print("num_of_level =", num_of_level_array)
            files_num_of_level = np.load(os.path.join(round_str, "files_num_of_level.npy"))


            mixed_eval_policy = [copy.deepcopy(policies_oppo[0])]
            index_p = 1
            for j in range(1, len(num_of_level_array)):
                if num_of_level_array[j] > 0:
                    probs_ = np.ones(num_of_level_array[j])
                    probs_ /= sum(probs_)
                    mix_temp = mixing_policy(all_args.n_rollout_threads, copy.deepcopy(policies_oppo[index_p:index_p + num_of_level_array[j]]), probs=probs_, device=device)
                    mixed_eval_policy.append(mix_temp)
                    index_p += files_num_of_level[j]
            
            policy_type = dict()
            for j in range(len(num_of_level_array)):
                if j == 0:
                    policy_type[j] = "pure"
                else:
                    policy_type[j] = "mixed"
            eval_oppo = eval_match(mixed_eval_policy, eval_match_envs, policy_type=policy_type)
        else:
            eval_oppo = eval_match(policies_oppo, eval_match_envs)
        payoff_mat = eval_oppo.get_win_prob_mat(all_args.n_rollout_threads, all_args.eval_episode_num)
        payoff_mat_full = payoff_mat - payoff_mat.T

        solver = Nash_matrix(role_name, role_name)

        print("payoff_mat = ", payoff_mat_full)
        probs_oppo, payoffs = solver.caul_prob_from_payoff(payoff_mat_full)

        print("probs = ", probs_oppo[0])
        print("nash payoff = ", payoffs)

        if all_args.population_type == "MFR_2level":
            probs_extend = []
            for i in range(len(probs_oppo[0])):
                for j in range(files_num_of_level[i]):
                    if j < num_of_level_array[i]:
                        probs_extend.append(probs_oppo[0][i]/num_of_level_array[i])
                    else:
                        probs_extend.append(0.)
            probs_extend = np.array(probs_extend)
        
        print("policy_backup_dir = ", round_str)

        policies_spiel = []
        player_ids = range(2)

        for i in range(len(policies_oppo)):
            if i == 0:
                policy_s = policy_like_spiel(copy.deepcopy(game), range(2), policies_oppo[i], random_policy=True)
            else:
                policy_s = policy_like_spiel(copy.deepcopy(game), range(2), policies_oppo[i])

            policies_spiel.append(policy_s)

        if all_args.population_type == "MFR_2level":
            policies_support = np.array(policies_spiel[:len(probs_extend)])[probs_extend>1e-5].tolist()
            probs_support = probs_extend[probs_extend>1e-5]
        else:
            policies_support = np.array(policies_spiel)[probs_oppo[0]>1e-5].tolist()
            probs_support = probs_oppo[0][probs_oppo[0]>1e-5]

        final_policies = gen_mix_spiel_policy(copy.deepcopy(game), range(2), [policies_support, copy.deepcopy(policies_support)], [probs_support, probs_support.copy()])

        print("generate the mixing policy!")

        exp, expl_per_player = calc_exp(copy.deepcopy(game), final_policies)

        print("exploit = ", exp)
        print("exploit per player = ", expl_per_player)

        folder_inx += all_args.step_folder_index

        if all_args.use_wandb:
            wandb.log({"exploit": exp})


    # post process
    envs_p.close()
    if all_args.use_eval and eval_envs_p is not envs_p:
        eval_envs_p.close()



if __name__ == "__main__":
    main(sys.argv[1:])
